# SPDX-License-Identifier: BSD-2-Clause

load("@rules_python//python:defs.bzl", "py_binary", "py_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load(":defs.bzl", "bazel_lint_test", "py_lint_test")

exports_files([
    "pyproject.toml",
    "server.py",
])

py_binary(
    name = "server",
    srcs = ["server.py"],
    visibility = ["//visibility:public"],
    deps = [
        "@requirements_bpy//:pkg",
        "@requirements_flask//:pkg",
    ],
)

py_library(
    name = "unittest_path_cleaner",
    srcs = ["test/unittest_path_cleaner.py"],
)

py_test(
    name = "server_test",
    srcs = ["test/server_test.py"],
    data = [
        ":server",
        # This texture file is a dependency for `one_texture_box.blend`.
        "test/4_color_texture.png",
        "test/depth.png",
        "test/label.png",
        # TODO(zachfang): Consider generating this image in the test code if
        # it's easier to maintain for our future use cases.
        "test/one_gltf_one_blend.label.png",
        "test/one_rgba_box.gltf",
        "test/one_rgba_one_texture_boxes.color.png",
        "test/one_rgba_one_texture_boxes.gltf",
        "test/one_texture_box.blend",
        "test/two_rgba_boxes.color.png",
        "test/two_rgba_boxes.gltf",
    ],
    deps = [
        ":unittest_path_cleaner",
        "@test_requirements_numpy//:pkg",
        "@test_requirements_pillow//:pkg",
        "@test_requirements_requests//:pkg",
    ],
)

config_setting(
    name = "darwin-amd64",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "darwin-arm64",
    constraint_values = [
        "@platforms//os:osx",
        "@platforms//cpu:arm64",
    ],
)

config_setting(
    name = "linux-amd64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "linux-arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:arm64",
    ],
)

alias(
    name = "buildifier",
    actual = select({
        ":darwin-amd64": "@buildifier-darwin-amd64//file:downloaded",
        ":darwin-arm64": "@buildifier-darwin-arm64//file:downloaded",
        ":linux-amd64": "@buildifier-linux-amd64//file:downloaded",
        ":linux-arm64": "@buildifier-linux-arm64//file:downloaded",
        "//conditions:default": "@platforms//:incompatible",
    }),
    visibility = ["//:__subpackages__"],
)

bazel_lint_test(
    name = "bazel_lint_test",
    srcs = [
        "BUILD.bazel",
        "WORKSPACE.bazel",
        "defs.bzl",
    ],
)

py_lint_test(
    name = "py_lint_test",
    srcs = [
        "bazel",
        "server.py",
        "test/server_test.py",
        "test/unittest_path_cleaner.py",
    ],
)

py_binary(
    name = "black",
    testonly = True,
    srcs = ["@test_requirements_black//:rules_python_wheel_entry_point_black.py"],
    main = "@test_requirements_black//:rules_python_wheel_entry_point_black.py",
    tags = ["manual"],
    deps = ["@test_requirements_black//:rules_python_wheel_entry_point_black"],
)

compile_pip_requirements(
    name = "requirements",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.txt",
    tags = ["manual"],
)

compile_pip_requirements(
    name = "test_requirements",
    requirements_in = "test/requirements.in",
    requirements_txt = "test/requirements.txt",
    tags = ["manual"],
)
