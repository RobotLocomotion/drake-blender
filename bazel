#!/usr/bin/python3
# SPDX-License-Identifier: BSD-2-Clause

"""If you don't have Bazel installed on your $PATH, you can use this program
to run a copy of Bazel that's automatically downloaded from the internet, e.g.:

 ./bazel test //...

If you have Bazel or Bazelisk already on your $PATH, you can run that instead,
e.g.:

 bazel test //...
"""

import hashlib
import os
from pathlib import Path
import sys
import urllib.request as request


def _fetch_bazelisk():
    # Specify the file we want to fetch.
    # TODO(jwnimmer-tri) Find a way to automate bumping this version number.
    url = "https://raw.githubusercontent.com/bazelbuild/bazelisk/v1.17.0/bazelisk.py"  # noqa
    sha256 = "94655ff9cb5286677ee56cd5ac2e82cb91be4385ceb790b0a83369bc79a796b9"

    # Create a home for it.
    dot_bazel = Path(__file__).resolve().with_name(".bazel")
    dot_bazel.mkdir(exist_ok=True)
    bazelisk = dot_bazel / "bazelisk"

    # Check if we've already fetched it.
    try:
        hasher = hashlib.sha256()
        with open(bazelisk, "rb") as f:
            hasher.update(f.read())
        if hasher.hexdigest() == sha256:
            return bazelisk
    except IOError:
        pass

    # Fetch it.
    print(f"Downloading {url} ...")
    with request.urlopen(url=url, timeout=10) as response:
        content = response.read()
    hasher = hashlib.sha256()
    hasher.update(content)
    digest = hasher.hexdigest()
    if digest != sha256:
        raise RuntimeError(f"Got wrong sha256 {digest} but wanted {sha256}.")
    with open(bazelisk, "wb") as f:
        f.write(content)
    bazelisk.chmod(0o755)

    return bazelisk


def _apply_bazeliskrc():
    # The Python version of bazelisk doesn't support this dotfile yet. Sigh.
    # We'll sherpa the settings manually via the environment.
    with open(Path(__file__).resolve().with_name(".bazeliskrc")) as f:
        for line in f.readlines():
            line = line.split("#", maxsplit=1)[0].strip()
            if line:
                name, value = line.split("=", maxsplit=1)
                os.environ[name] = value


def _main():
    bazelisk = _fetch_bazelisk()
    _apply_bazeliskrc()
    os.execv(bazelisk, [str(bazelisk)] + sys.argv[1:])


if __name__ == "__main__":
    _main()
