#!/usr/bin/python3
# SPDX-License-Identifier: BSD-2-Clause

"""If you don't have Bazel installed on your $PATH, you can use this program
to run a copy of Bazel that's automatically downloaded from the internet, e.g.:

 ./bazel test //...

If you have Bazel or Bazelisk already on your $PATH, you can run that instead,
e.g.:

 bazel test //...
"""

import hashlib
import os
from pathlib import Path
import sys
import urllib.request as request

# The pinned version and checksum of bazelisk.
_VERSION = "1.19.0"
_SHA256 = "9adad8df709e8e8d657df3de48594967d2ba89854b8ebc734856d41852547a4a"
_URL = f"https://raw.githubusercontent.com/bazelbuild/bazelisk/v{_VERSION}/bazelisk.py"  # noqa


def _fetch_bazelisk():
    # Create a home for our downloaded bazelisk.
    dot_bazel = Path(__file__).resolve().with_name(".bazel")
    dot_bazel.mkdir(exist_ok=True)
    bazelisk = dot_bazel / "bazelisk"

    # Check if we've already fetched it.
    try:
        hasher = hashlib.sha256()
        with open(bazelisk, "rb") as f:
            hasher.update(f.read())
        if hasher.hexdigest() == _SHA256:
            return bazelisk
    except IOError:
        pass

    # Fetch it.
    print(f"Downloading {_URL} ...")
    with request.urlopen(url=_URL, timeout=10) as response:
        content = response.read()
    hasher = hashlib.sha256()
    hasher.update(content)
    digest = hasher.hexdigest()
    if digest != _SHA256:
        raise RuntimeError(f"Got wrong sha256 {digest} but wanted {_SHA256}.")
    with open(bazelisk, "wb") as f:
        f.write(content)
    bazelisk.chmod(0o755)

    return bazelisk


def _apply_bazeliskrc():
    # The Python version of bazelisk doesn't support this dotfile yet. Sigh.
    # We'll sherpa the settings manually via the environment.
    with open(Path(__file__).resolve().with_name(".bazeliskrc")) as f:
        for line in f.readlines():
            line = line.split("#", maxsplit=1)[0].strip()
            if line:
                name, value = line.split("=", maxsplit=1)
                os.environ[name] = value


def _main():
    bazelisk = _fetch_bazelisk()
    _apply_bazeliskrc()
    os.execv(bazelisk, [str(bazelisk)] + sys.argv[1:])


if __name__ == "__main__":
    _main()
